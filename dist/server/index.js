"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _dotenv = _interopRequireDefault(require("dotenv"));

var _path = _interopRequireDefault(require("path"));

var _fastify = _interopRequireDefault(require("fastify"));

var _fastifyStatic = _interopRequireDefault(require("fastify-static"));

var _fastifyErrorPage = _interopRequireDefault(require("fastify-error-page"));

var _pointOfView = _interopRequireDefault(require("point-of-view"));

var _fastifyFormbody = _interopRequireDefault(require("fastify-formbody"));

var _fastifySecureSession = _interopRequireDefault(require("fastify-secure-session"));

var _fastifyPassport = _interopRequireDefault(require("fastify-passport"));

var _fastifySensible = _interopRequireDefault(require("fastify-sensible"));

var _fastifyReverseRoutes = require("fastify-reverse-routes");

var _fastifyMethodOverride = _interopRequireDefault(require("fastify-method-override"));

var _fastifyObjectionjs = _interopRequireDefault(require("fastify-objectionjs"));

var _qs = _interopRequireDefault(require("qs"));

var _pug = _interopRequireDefault(require("pug"));

var _i18next = _interopRequireDefault(require("i18next"));

var _ru = _interopRequireDefault(require("./locales/ru.js"));

var _webpackConfigBabel = _interopRequireDefault(require("../webpack.config.babel.js"));

var _index = _interopRequireDefault(require("./routes/index.js"));

var _index2 = _interopRequireDefault(require("./helpers/index.js"));

var _knexfile = _interopRequireDefault(require("../knexfile.js"));

var _index3 = _interopRequireDefault(require("./models/index.js"));

var _FormStrategy = _interopRequireDefault(require("./lib/passportStrategies/FormStrategy.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @ts-check
// import fastifyFlash from 'fastify-flash';
// @ts-ignore
_dotenv.default.config();

const mode = process.env.NODE_ENV || 'development';
const isProduction = mode === 'production';
const isDevelopment = mode === 'development';

const setUpViews = app => {
  const {
    devServer
  } = _webpackConfigBabel.default;
  const devHost = `http://${devServer.host}:${devServer.port}`;
  const domain = isDevelopment ? devHost : '';
  const helpers = (0, _index2.default)(app);
  app.register(_pointOfView.default, {
    engine: {
      pug: _pug.default
    },
    includeViewExtension: true,
    defaultContext: { ...helpers,
      assetPath: filename => `${domain}/assets/${filename}`
    },
    templates: _path.default.join(__dirname, '..', 'server', 'views')
  });
  app.decorateReply('render', function render(viewPath, locals) {
    this.view(viewPath, { ...locals,
      reply: this
    });
  });
};

const setUpStaticAssets = app => {
  const pathPublic = isProduction ? _path.default.join(__dirname, '..', 'public') : _path.default.join(__dirname, '..', 'dist', 'public');
  app.register(_fastifyStatic.default, {
    root: pathPublic,
    prefix: '/assets/'
  });
};

const setupLocalization = () => {
  _i18next.default.init({
    lng: 'ru',
    fallbackLng: 'en',
    debug: isDevelopment,
    resources: {
      ru: _ru.default
    }
  });
};

const addHooks = app => {
  app.addHook('preHandler', async (req, reply) => {
    reply.locals = {
      isAuthenticated: () => req.isAuthenticated()
    };
  });
};

const registerPlugins = app => {
  app.register(_fastifySensible.default);
  app.register(_fastifyErrorPage.default);
  app.register(_fastifyReverseRoutes.plugin);
  app.register(_fastifyFormbody.default, {
    parser: _qs.default.parse
  });
  app.register(_fastifySecureSession.default, {
    secret: process.env.SESSION_KEY,
    cookie: {
      path: '/'
    }
  });

  _fastifyPassport.default.registerUserDeserializer(user => app.objection.models.user.query().findById(user.id));

  _fastifyPassport.default.registerUserSerializer(user => Promise.resolve(user));

  _fastifyPassport.default.use(new _FormStrategy.default('form', app));

  app.register(_fastifyPassport.default.initialize());
  app.register(_fastifyPassport.default.secureSession());
  app.decorate('fp', _fastifyPassport.default);
  app.decorate('authenticate', (...args) => _fastifyPassport.default.authenticate('form', {
    failureRedirect: app.reverse('root'),
    failureFlash: _i18next.default.t('flash.authError')
  } // @ts-ignore
  )(...args));
  app.register(_fastifyMethodOverride.default);
  app.register(_fastifyObjectionjs.default, {
    knexConfig: _knexfile.default[mode],
    models: _index3.default
  });
};

var _default = () => {
  const app = (0, _fastify.default)({
    logger: {
      prettyPrint: isDevelopment
    }
  });
  registerPlugins(app);
  setupLocalization();
  setUpViews(app);
  setUpStaticAssets(app);
  (0, _index.default)(app);
  addHooks(app);
  return app;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,